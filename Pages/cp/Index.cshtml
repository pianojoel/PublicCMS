@page "{projectname?}/{id?}"
@using Microsoft.AspNetCore.Html
@using Models

@model Public.Pages.cp.IndexModel

@{
    ViewData["Title"] = "Index";
}


<div class="text-center">
    <div class="row">

        @foreach (var item in Model.SitePages)
        {
        <div class="col">
            <div class="glass-card">
                <a  href="?pageid=@item.ID">
                    @Html.DisplayFor(modelItem => item.Title)
                </a>
            </div>


        </div>
        }

    <div class="col">
        <div class="glass-card">
            <a asp-page="Create">New Page</a>
            </div>


        </div>

    </div>
    <div class="row mt-3">
        <div class="col-4">
            <a class="btn btn-primary" href="/cp/projectsettings">Project Settings</a>
        </div>
        <div class="col-4">
            <a class="btn btn-primary" href=@("/display/" + Model.CurrentProject.ProjectNameRoute + "/" + Model.CurrentPage.SitePageTitleRoute)>Display page</a>
        </div>
    </div>
</div>




<script>

    tinymce.init({
        selector: '.myeditablediv',
       
        plugins: [
            'autolink',
            'codesample',
            'link',
            'lists',                                    
            'quickbars',            
            'textcolor'
        ],
        quickbars_selection_toolbar: 'bold italic | alignleft aligncenter alignright | quicklink | forecolor backcolor',
        quickbars_insert_toolbar: false,
        toolbar: false,
        menubar: false,
        inline: true,
        height: 300,
        setup: function (editor) {
            editor.on('blur', function (e) {
                let id = $(this).attr("id");                
                document.getElementById("b" + id).click();
            });
        }
    });

    tinymce.init({
        selector: '.myeditablediv-header',
        plugins: [
            'autolink',
            'quickbars',   
            'link',
        ],
        quickbars_selection_toolbar: 'bold italic | alignleft aligncenter alignright | forecolor backcolor',
        quickbars_insert_toolbar: false,        
        toolbar: false,
        menubar: false,
        inline: true,
        height: 300,        
        setup: function (editor) {
            editor.on('blur', function (e) {
                let id = $(this).attr("id");                
                document.getElementById("b" + id).click();
            });
        }       
    });
   
</script>


@if (Model.PageId != 0)
{


    <div>

       
        <div>


            <form method="post" id="editorForm" name="editorForm" enctype="multipart/form-data">

                @foreach (var comp in Model.PageComponents)
                {
                    <div style="background-color:@comp.BgColor" class="row comp-row align-items-center" id=@("Row" + @comp.ID)>
                        <div class="col-1">
                            <button class="d-none" id="@("btn" + comp.ID)" asp-page-handler="ChangeBgColor" asp-route-pageid="@Model.PageId" asp-route-compid="@comp.ID"></button>
                            <input id="@("Bg" + comp.ID)" class="colorpicker" onclick='enable("@("Bg" + comp.ID)")' oninput='changeColor("@("btn" + comp.ID)")' name="BgColor" type="color" value="@comp.BgColor"/>
                        </div>

                        <div class="col-1">
                            @if (!comp.Columns.Any(c => c.ComponentType == "video" || c.ComponentType == "googlemap" || c.ComponentType == "stockticker"))
                            {
                                <button class="btn btn-primary" asp-page-handler="AddColumn" asp-route-compid="@comp.ID" asp-route-pageid="@Model.PageId">Add Column</button>
                            }

                        </div>




                        <div class="col-8">
                            <div class="row flex-nowrap" style="overflow-x:hidden; min-height:200px;">



                                @foreach (var column in comp.Columns)
                                {
                                <div class="col">
                                    @if (column.ComponentType == "default")
                                    {
                                        <component type="typeof(Components.DefaultComponent)" render-mode="ServerPrerendered" param-CurrentPage="@Model.CurrentPage" param-Comp="@comp" param-Column="@column" param-PageId="@Model.PageId" />
                                    }
                                    else if (column.ComponentType == "text")
                                    {
                                        <component type="typeof(Components.TextComponent)" render-mode="ServerPrerendered" param-Column="@column" />
                                    }
                                    else if (column.ComponentType == "link")
                                    {
                                        <component type="typeof(Components.LinkComponent)" render-mode="Static" param-Column="@column" param-CompId="comp.ID" param-PageId="@Model.PageId" />
                                    }

                                    else if (column.ComponentType == "header")
                                    {
                                        <component type="typeof(Components.HeaderComponent)" render-mode="ServerPrerendered" param-Column="@column" />
                                    }
                                    else if (column.ComponentType == "image")
                                    {
                                        <component type="typeof(Components.ImageComponent)" render-mode="ServerPrerendered" param-Column="@column" param-CompId="comp.ID" param-PageId="@Model.PageId" />
                                    }
                                    else if (column.ComponentType == "googlemap")
                                    {
                                        <component type="typeof(Components.GoogleMapComponent)" render-mode="ServerPrerendered" param-Column="@column" param-CompId="comp.ID" param-PageId="@Model.PageId" />
                                    }
                                    else if (column.ComponentType == "stockticker")
                                    {
                                        <component type="typeof(Components.StockTickerComponent)" render-mode="ServerPrerendered" param-CurrentPage="@Model.CurrentPage" param-Column="@column" param-CompId="comp.ID" param-PageId="@Model.PageId" />
                                    }
                                    else if (column.ComponentType == "video")
                                    {
                                        <component type="typeof(Components.YoutubeComponent)" render-mode="ServerPrerendered" param-Column="@column" param-CompId="comp.ID" param-PageId="@Model.PageId" />
                                    }
                                    else if (column.ComponentType == "visitorcounter")
                                    {
                                        <component type="typeof(Components.VisitorCounterComponent)" render-mode="ServerPrerendered" param-visitors=@Model.Visitors />
                                    }
                                    <button class="d-none" id="@("b" + column.ID)" asp-page-handler="SaveColumnComp" asp-route-compid="@comp.ID" asp-route-column="@column.ID" asp-route-pageid="@Model.PageId"></button>
                                </div>
                                }
                            </div>
                        </div>


                        <div class="col-2">
                            <button class="btn btn-primary" asp-page-handler="Remove" asp-route-deleteid="@comp.ID" asp-route-pageid="@Model.PageId"><img src="~/deleteicon.png" width="25"></button>


                            @if (comp.DisplayOrder != 0)
                            {<button class="btn btn-primary" asp-page-handler="MoveUp" asp-route-order="@comp.DisplayOrder" asp-route-pageid="@Model.PageId">&uarr;</button>}
                            else
                            {<button disabled class="btn btn-primary disabled">&uarr;</button>}

                            @if (comp.DisplayOrder != Model.PageComponents.Count - 1)
                            {<button class="btn btn-primary" asp-page-handler="MoveDown" asp-route-order="@comp.DisplayOrder" asp-route-pageid="@Model.PageId">&darr;</button>}
                            else
                            {<button disabled class="btn btn-primary disabled">&darr;</button>}

                        </div>
                     </div>

                }
                        <div class="row mt-3">                            
                                <button asp-page-handler="AddComponent" asp-route-pageid="@Model.PageId" class="btn btn-secondary newcomponent-button" id="dropdownMenuButton">Add row</button>                            
                        </div>

                    
                
            </form>

        </div>


    </div>

    <script>

        function changeImgSize(imgId, rangeId) {

            console.log(rangeId);

            let img = document.getElementById(imgId);

            let range = document.getElementById(rangeId);
            img.style.width = range.value + '%';

        }

        function pressBtn(blockInputClass, allowInputClass, btnId) {



            console.log(btnId);

            enableInput(blockInputClass, allowInputClass);
            document.getElementById(btnId).click();

        }

        function enableInput(blockInputClass, allowInputClass) {
            let blockInputs = document.querySelectorAll('.' + blockInputClass);
            blockInputs.forEach(i => {
                i.setAttribute("disabled", true);
            });
            let toEnable = document.querySelectorAll('.' + allowInputClass);
            toEnable.forEach(i => {
                i.removeAttribute('disabled');
                console.log("removed disabledattribute for: " + i.value);
            });


        }

        function pressEnterSubmit(e, blockInputClass, allowInputClass, btnId) {
            if (e.keyCode === 13) {
                e.preventDefault(); // Ensure it is only this code that runs

                console.log("Pressed Enter");
                enableInput(blockInputClass, allowInputClass);
                document.getElementById(btnId).click();

            }
        }


        function handle(e, id) {
            if (e.keyCode === 13) {
                e.preventDefault(); // Ensure it is only this code that runs

                console.log("handling it " + "btn" + id);
                enableLinkInput("link" + id);
                document.getElementById("btn" + id).click();

            }
        }
        function enableLinkInput(id) {
            console.log("enable " + id);
            let linkInputs = document.querySelectorAll(".linkInput");
            linkInputs.forEach(item => {

                item.setAttribute("disabled", true);



            });
            let enableInputs = document.querySelectorAll("." + id);
            enableInputs.forEach(item => {
                item.removeAttribute("disabled");
            })
        }



        function enable(id) {

            let colorPickers = document.querySelectorAll(".colorpicker");
            colorPickers.forEach(item => {
                item.setAttribute("disabled", true);

            });
            document.getElementById(id).removeAttribute("disabled");
        }

        function changeColor(id) {
            console.log("Change color for " + id);
            let btn = document.getElementById(id);
            btn.click();

        }

        function addComponent() {
            let list = document.getElementById("editorForm");
            let count = document.getElementById("editorForm").children.length;
            let id = "TextBlock" + (count + 1);




            let node = document.createElement("div");
            node.innerHTML = id;
            node.id = id;

            list.appendChild(node);


            tinymce.init({
                selector: "#" + id,
                plugins: [
                    'autolink',
                    'codesample',
                    'link',
                    'lists',
                    'media',
                    'powerpaste',
                    'table',
                    'image',
                    'quickbars',
                    'codesample',
                    'help'
                ],
                quickbars_selection_toolbar: 'bold italic | formatselect | quicklink | blockquote',
                toolbar: true,
                menubar: false,
                inline: true,
                height: 200
            });
            //console.log(list);
            //console.log(count);
        }
        function removeComponent(id) {
            console.log("remove " + id)
            document.getElementById(id).remove();
        }



    </script>
}